#!/bin/bash
# wget https://raw.githubusercontent.com/AtheneumChain/Scripts/master/infopage -O infopage
# User Friendly Masternode infopage by @bitmonopoly 2018
ver="1.2.5"
project='Atheneum'
client=$(find ~/ -name "atheneum-cli" | head -n 1)

red='\033[1;31m'
green='\033[1;32m'
yellow='\033[1;33m'
blue='\033[1;36m'
clear='\033[0m'
erase='\033[K'

echo -e "${red} Checking Version ...${clear}"

getcurrent=$(curl -q https://raw.githubusercontent.com/AtheneumChain/Scripts/master/versions | jq .infopage | tr -d '"') > /dev/null 2>&1
declare -a status
  status[0]="Initial Masternode Syncronization"
  status[1]="Syncing Masternode Sporks"
  status[2]="Syncing Masternode List"
  status[3]="Syncing Masternode Winners"
  status[4]="Syncing Budget"
  status[5]="Masternode Syncronization Timeout"
  status[10]="Syncing Masternode Budget Proposals"
  status[11]="Syncing Masternode Finalized Budgets"
  status[998]="Masternode Sync Failed"
  status[999]="Masternode Sync Successful"

if ! [[ $ver == $getcurrent ]]; then
  echo -e "${red} Version outdated! Downloading new version ...${clear}"
  wget https://raw.githubusercontent.com/AtheneumChain/Scripts/master/infopage -O /usr/local/bin/infopage > /dev/null 2>&1
  chmod +x /usr/local/bin/infopage
  sleep 2
  echo
  echo -e "${yellow} Script updated! please run the command again"
  echo
  exit 1;
fi

function singleNode() 
{
  clear
  if [ -z "$1" ]; then
    datadir='/root/.Atheneum'
    conf='/root/.Atheneum/atheneum.conf'
  else
    datadir="/root/.$1"
    conf="/root/.$1/atheneum.conf"
  fi
  
mincol=70;
while [ 1 ]; do
  COLS=$(tput cols);
  LINS=$(tput lines);
if [[ $COLS -lt $mincol ]]; then
  clear;
  tput cup 0 0
  echo "Display too small. please widen it: Columns: $COLS/$mincol           ";
  sleep 1
else
    getinfo=$($client -datadir=$datadir -conf=$conf getinfo)
    gettxoutsetinfo=$($client -datadir=$datadir -conf=$conf gettxoutsetinfo)
    getwinner=$($client -datadir=$datadir -conf=$conf getpoolinfo)
  
    ismasternode=$(cat $datadir/atheneum.conf | grep -c masternode)
    if ! [[ $ismasternode == "0" ]]; then
      mnstatus=$($client -datadir=$datadir -conf=$conf masternode debug)
    else
      mnstatus="This is not a masternode"  
    fi
    mnsync=$($client -datadir=$datadir -conf=$conf mnsync status)
    count=$($client -datadir=$datadir -conf=$conf masternode list | grep -c addr | awk '{print $0"                             "}')
    winner=$(echo $getwinner | jq .current_masternode | tr -d '"' | awk '{print $0"                             "}')
  
    version=$(echo $getinfo | jq .version | awk '{print $0"                             "}')
    protocol=$(echo $getinfo | jq .protocolversion | awk '{print $0"                             "}')
    blocks=$(echo $getinfo | jq .blocks | awk '{print $0"                             "}')
    connections=$(echo $getinfo | jq .connections | awk '{print $0"                             "}')
    supply=$(echo $gettxoutsetinfo | jq .total_amount | awk '{print $0"                             "}')
    transactions=$(echo $gettxoutsetinfo | jq .transactions | awk '{print $0"                             "}')
  
    blockchainsynced=$(echo $mnsync | jq .IsBlockchainSynced | awk '{print $0"                             "}')
    asset=$(echo $mnsync | jq .RequestedMasternodeAssets)
    attempt=$(echo $mnsync | jq .RequestedMasternodeAttempt)
  
    logresult=$(tail -n $(( $LINS - 18 )) $datadir/debug.log | pr -T -o 2 | cut -c 1-$(( $COLS - 2 )) | awk '{printf("%.'$(( $COLS - 2 ))'s \n", $0"                                                    ")}')
  
    #clear
    tput cup 0 0
    echo -e "${red}$project ${yellow}node information script version ${blue}$ver        ${yellow}              $1 ${clear}"
    echo
    echo -e "${erase}${blue} Protocol    : ${green}$protocol${clear}"
    echo -e "${erase}${blue} Version     : ${green}$version${clear}"
    echo -e "${erase}${blue} Connections : ${green}$connections${clear}"
    echo -e "${erase}${blue} Supply      : ${green}$supply${clear}"
    echo -e "${erase}${blue} Transactions: ${green}$transactions${clear}"
    echo -e "${erase}${blue} MN Count    : ${green}$count${clear}"
    echo -e "${erase}${blue} Last Winner : ${green}$winner${clear}"
    echo -e "${erase}${blue} blocks      : ${yellow}$blocks${clear}"
    echo
    echo -e "${erase}${blue} Sync Status : ${green}${status[$asset]} ${blue}attempt ${yellow}$attempt ${blue}of ${yellow}8                ${clear}"
    echo -e "${erase}${blue} MN Status   : ${green}$mnstatus${clear}"
    echo -e "${yellow}"
    pad=$(printf '%*s' $(( $COLS - 1 )) "" | tr ' ' '=')
    echo -e "${erase}${yellow}$pad${clear}"
    echo -e "${blue}$logresult${clear}"
    echo -e "${erase}${yellow}$pad${clear}"
    echo -e "${erase}${green} Press CTRL-C to exit. Updated every 2 seconds. ${blue} 2018               @bitmonopoly${clear}"
    sleep 2
  fi
  done
}
 
function allNodes()
{
  FINDFOLDER="\.Atheneum"
  DATAFOLDER=".Atheneum"
  CONFIG="atheneum.conf"

  #Get number of existing masternode directories
  DIR_COUNT=$(ls -la /root/ | grep -c $FINDFOLDER)
  
clear
mincol=104;
while [ 1 ]; do
  COLS=$(tput cols);
  LINS=$(tput lines);
if [[ $COLS -lt $mincol ]]; then
  clear;
  echo "Display too small. please widen it: Columns: $COLS/$mincol           ";
  sleep 1
else
    STATUS=$($client -datadir=/root/$DATAFOLDER -conf=/root/$DATAFOLDER/$CONFIG masternode debug)
    SYNC=$($client -datadir=/root/$DATAFOLDER -conf=/root/$DATAFOLDER/$CONFIG mnsync status | jq .IsBlockchainSynced)
    echo -e "${red}$project ${yellow}Masternode Status script version ${blue}$ver        ${yellow}              ${clear}"
    echo
    echo -e "${blue}Masternode ${green}$DATAFOLDER ${blue} status  : BlockChainSynced: ${yellow}$SYNC ${clear}, ${blue}Masternode: ${yellow}$STATUS${clear}                              "
    if [[ $DIR_COUNT -gt 1 ]]; then
      for i in `seq 2 $DIR_COUNT`;
        do
          STATUS=$($client -datadir=/root/$DATAFOLDER$i -conf=/root/$DATAFOLDER$i/$CONFIG masternode debug)
          SYNC=$($client -datadir=/root/$DATAFOLDER$i -conf=/root/$DATAFOLDER$i/$CONFIG mnsync status | jq .IsBlockchainSynced)
          echo -e "${blue}Masternode ${green}$DATAFOLDER$i ${blue}status  : BlockChainSynced: ${yellow}$SYNC ${clear}, ${blue}Masternode: ${yellow}$STATUS${clear}                              "
        done
    fi
    sleep 2
  fi
  done
}

if [ -z "$1" ] || [ $1 != "all" ]; then
  singleNode $1
else
  allNodes
fi
#!/bin/bash
# wget https://raw.githubusercontent.com/AtheneumChain/Scripts/master/infopage -O infopage
# User Friendly Masternode infopage by @bitmonopoly 2018
ver="1.2.4"
project='Atheneum'
client=$(find ~/ -name "atheneum-cli" | head -n 1)

red='\033[1;31m'
green='\033[1;32m'
yellow='\033[1;33m'
blue='\033[1;36m'
clear='\033[0m'
erase='\033[K'

echo -e "${red} Checking Version ...${clear}"

getcurrent=$(curl -q https://raw.githubusercontent.com/AtheneumChain/Scripts/master/versions | jq .infopage | tr -d '"') > /dev/null 2>&1
declare -a status
  status[0]="Initial Masternode Syncronization"
  status[1]="Syncing Masternode Sporks"
  status[2]="Syncing Masternode List"
  status[3]="Syncing Masternode Winners"
  status[4]="Syncing Budget"
  status[5]="Masternode Syncronization Timeout"
  status[10]="Syncing Masternode Budget Proposals"
  status[11]="Syncing Masternode Finalized Budgets"
  status[998]="Masternode Sync Failed"
  status[999]="Masternode Sync Successful"

if ! [[ $ver == $getcurrent ]]; then
  echo -e "${red} Version outdated! Downloading new version ...${clear}"
  wget https://raw.githubusercontent.com/AtheneumChain/Scripts/master/infopage -O /usr/local/bin/infopage > /dev/null 2>&1
  chmod +x /usr/local/bin/infopage
  sleep 2
  echo
  echo -e "${yellow} Script updated! please run the command again"
  echo
  exit 1;
fi

function singleNode() 
{
  clear
  if [ -z "$1" ]; then
    datadir='/root/.Atheneum'
    conf='/root/.Atheneum/atheneum.conf'
  else
    datadir="/root/.$1"
    conf="/root/.$1/atheneum.conf"
  fi
  
mincol=70;
while [ 1 ]; do
  COLS=$(tput cols);
  LINS=$(tput lines);
if [[ $COLS -lt $mincol ]]; then
  clear;
  tput cup 0 0
  echo "Display too small. please widen it: Columns: $COLS/$mincol           ";
  sleep 1
else
    getinfo=$($client -datadir=$datadir -conf=$conf getinfo)
    gettxoutsetinfo=$($client -datadir=$datadir -conf=$conf gettxoutsetinfo)
    getwinner=$($client -datadir=$datadir -conf=$conf getpoolinfo)
  
    ismasternode=$(cat $datadir/atheneum.conf | grep -c masternode)
    if ! [[ $ismasternode == "0" ]]; then
      mnstatus=$($client -datadir=$datadir -conf=$conf masternode debug)
    else
      mnstatus="This is not a masternode"  
    fi
    mnsync=$($client -datadir=$datadir -conf=$conf mnsync status)
    count=$($client -datadir=$datadir -conf=$conf masternode list | grep -c addr | awk '{print $0"                             "}')
    winner=$(echo $getwinner | jq .current_masternode | tr -d '"' | awk '{print $0"                             "}')
  
    version=$(echo $getinfo | jq .version | awk '{print $0"                             "}')
    protocol=$(echo $getinfo | jq .protocolversion | awk '{print $0"                             "}')
    blocks=$(echo $getinfo | jq .blocks | awk '{print $0"                             "}')
    connections=$(echo $getinfo | jq .connections | awk '{print $0"                             "}')
    supply=$(echo $gettxoutsetinfo | jq .total_amount | awk '{print $0"                             "}')
    transactions=$(echo $gettxoutsetinfo | jq .transactions | awk '{print $0"                             "}')
  
    blockchainsynced=$(echo $mnsync | jq .IsBlockchainSynced | awk '{print $0"                             "}')
    asset=$(echo $mnsync | jq .RequestedMasternodeAssets)
    attempt=$(echo $mnsync | jq .RequestedMasternodeAttempt)
  
    logresult=$(tail -n $(( $LINS - 18 )) $datadir/debug.log | pr -T -o 2 | cut -c 1-$(( $COLS - 2 )) | awk '{printf("%.'$(( $COLS - 2 ))'s \n", $0"                                                    ")}')
  
    #clear
    tput cup 0 0
    echo -e "${red}$project ${yellow}node information script version ${blue}$ver        ${yellow}              $1 ${clear}"
    echo
    echo -e "${erase}${blue} Protocol    : ${green}$protocol${clear}"
    echo -e "${erase}${blue} Version     : ${green}$version${clear}"
    echo -e "${erase}${blue} Connections : ${green}$connections${clear}"
    echo -e "${erase}${blue} Supply      : ${green}$supply${clear}"
    echo -e "${erase}${blue} Transactions: ${green}$transactions${clear}"
    echo -e "${erase}${blue} MN Count    : ${green}$count${clear}"
    echo -e "${erase}${blue} Last Winner : ${green}$winner${clear}"
    echo -e "${erase}${blue} blocks      : ${yellow}$blocks${clear}"
    echo
    echo -e "${erase}${blue} Sync Status : ${green}${status[$asset]} ${blue}attempt ${yellow}$attempt ${blue}of ${yellow}8                ${clear}"
    echo -e "${erase}${blue} MN Status   : ${green}$mnstatus${clear}"
    echo -e "${yellow}"
    pad=$(printf '%*s' $(( $COLS - 1 )) "" | tr ' ' '=')
    echo -e "${erase}${yellow}$pad${clear}"
    echo -e "${blue}$logresult${clear}"
    echo -e "${erase}${yellow}$pad${clear}"
    echo -e "${erase}${green} Press CTRL-C to exit. Updated every 2 seconds. ${blue} 2018               @bitmonopoly${clear}"
  
    sleep 2
  done
}
 
function allNodes()
{
  FINDFOLDER="\.Atheneum"
  DATAFOLDER=".Atheneum"
  CONFIG="atheneum.conf"

  #Get number of existing masternode directories
  DIR_COUNT=$(ls -la /root/ | grep -c $FINDFOLDER)
  
clear
mincol=104;
while [ 1 ]; do
  COLS=$(tput cols);
  LINS=$(tput lines);
if [[ $COLS -lt $mincol ]]; then
  clear;
  echo "Display too small. please widen it: Columns: $COLS/$mincol           ";
  sleep 1
else
    STATUS=$($client -datadir=/root/$DATAFOLDER -conf=/root/$DATAFOLDER/$CONFIG masternode debug)
    SYNC=$($client -datadir=/root/$DATAFOLDER -conf=/root/$DATAFOLDER/$CONFIG mnsync status | jq .IsBlockchainSynced)
    echo -e "${red}$project ${yellow}Masternode Status script version ${blue}$ver        ${yellow}              ${clear}"
    echo
    echo -e "${blue}Masternode ${green}$DATAFOLDER ${blue} status  : BlockChainSynced: ${yellow}$SYNC ${clear}, ${blue}Masternode: ${yellow}$STATUS${clear}                              "
    if [[ $DIR_COUNT -gt 1 ]]; then
      for i in `seq 2 $DIR_COUNT`;
        do
          STATUS=$($client -datadir=/root/$DATAFOLDER$i -conf=/root/$DATAFOLDER$i/$CONFIG masternode debug)
          SYNC=$($client -datadir=/root/$DATAFOLDER$i -conf=/root/$DATAFOLDER$i/$CONFIG mnsync status | jq .IsBlockchainSynced)
          echo -e "${blue}Masternode ${green}$DATAFOLDER$i ${blue}status  : BlockChainSynced: ${yellow}$SYNC ${clear}, ${blue}Masternode: ${yellow}$STATUS${clear}                              "
        done
    fi
    sleep 2
  fi
  done
}

if [ -z "$1" ] || [ $1 != "all" ]; then
  singleNode $1
else
  allNodes
fi
